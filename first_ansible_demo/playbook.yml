---
- hosts: all
  become: true
  tasks:
    - name: Ensure NTP (for time sync) is installed
      yum:
        use_backend: auto # not required. choices: auto;yum;yum4;dnf. This module supports C(yum) (as it always has), this is known as C(yum3)/C(YUM3)/C(yum-deprecated) by upstream yum developers. As of Ansible 2.7+, this module also supports C(YUM4), which is the "new yum" and it has an C(dnf) backend. By default, this module will select the backend based on the C(ansible_pkg_mgr) fact.
        name: ntp # not required. A package name or package specifier with version, like C(name-1.0). If a previous version is specified, the task also needs to turn C(allow_downgrade) on. See the C(allow_downgrade) documentation for caveats with downgrading packages. When using state=latest, this can be C('*') which means run C(yum -y update). You can also pass a url or a local path to a rpm file (using state=present). To operate on several packages this can accept a comma separated string of packages or (as of 2.0) a list of packages.
        exclude:  # not required. Package name(s) to exclude when state=present, or latest
        list:  # not required. Package name to run the equivalent of yum list --show-duplicates <package> against. In addition to listing packages, use can also list the following: C(installed), C(updates), C(available) and C(repos). This parameter is mutually exclusive with C(name).
        state: present # not required. choices: absent;installed;latest;present;removed. Whether to install (C(present) or C(installed), C(latest)), or remove (C(absent) or C(removed)) a package. C(present) and C(installed) will simply ensure that a desired package is installed. C(latest) will update the specified package if it's not of the latest available version. C(absent) and C(removed) will remove the specified package. Default is C(None), however in effect the default action is C(present) unless the C(autoremove) option is enabled for this module, then C(absent) is inferred.
        enablerepo:  # not required. I(Repoid) of repositories to enable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(","). As of Ansible 2.7, this can alternatively be a list instead of C(",") separated string
        disablerepo:  # not required. I(Repoid) of repositories to disable for the install/update operation. These repos will not persist beyond the transaction. When specifying multiple repos, separate them with a C(","). As of Ansible 2.7, this can alternatively be a list instead of C(",") separated string
        conf_file:  # not required. The remote yum configuration file to use for the transaction.
        disable_gpg_check: no # not required. Whether to disable the GPG checking of signatures of packages being installed. Has an effect only if state is I(present) or I(latest).
        skip_broken: no # not required. Skip packages with broken dependencies(devsolve) and are causing problems.
        update_cache: no # not required. Force yum to check if cache is out of date and redownload if needed. Has an effect only if state is I(present) or I(latest).
        validate_certs: yes # not required. This only applies if using a https url as the source of the rpm. e.g. for localinstall. If set to C(no), the SSL certificates will not be validated. This should only set to C(no) used on personally controlled sites using self-signed certificates as it avoids verifying the source site. Prior to 2.1 the code worked as if this was set to C(yes).
        update_only: no # not required. When using latest, only update installed packages. Do not install packages. Has an effect only if state is I(latest)
        installroot: / # not required. Specifies an alternative installroot, relative to which all packages will be installed.
        security: no # not required. If set to C(yes), and C(state=latest) then only installs updates that have been marked security related.
        bugfix: no # not required. If set to C(yes), and C(state=latest) then only installs updates that have been marked bugfix related.
        allow_downgrade: no # not required. Specify if the named package and version is allowed to downgrade a maybe already installed higher version of that package. Note that setting allow_downgrade=True can make this module behave in a non-idempotent way. The task could end up with a set of packages that does not match the complete list of specified packages to install (because dependencies between the downgraded package and others can cause changes to the packages which were in the earlier transaction).
        enable_plugin:  # not required. I(Plugin) name to enable for the install/update operation. The enabled plugin will not persist beyond the transaction.
        disable_plugin:  # not required. I(Plugin) name to disable for the install/update operation. The disabled plugins will not persist beyond the transaction.
        releasever:  # not required. Specifies an alternative release from which all packages will be installed.
        autoremove: no # not required. If C(yes), removes all "leaf" packages from the system that were originally installed as dependencies of user-installed packages but which are no longer required by any such package. Should be used alone or when state is I(absent) NOTE: This feature requires yum >= 3.4.3 (RHEL/CentOS 7+)
        disable_excludes:  # not required. Disable the excludes defined in YUM config files. If set to C(all), disables all excludes. If set to C(main), disable excludes defined in [main] in yum.conf. If set to C(repoid), disable excludes defined for given repo id.
        download_only: no # not required. Only download the packages, do not install them.
        lock_timeout: 30 # not required. Amount of time to wait for the yum lockfile to be freed.
        install_weak_deps: yes # not required. Will also install all packages linked by a weak dependency relation. NOTE: This feature requires yum >= 4 (RHEL/CentOS 8+)
        download_dir:  # not required. Specifies an alternate directory to store packages. Has an effect only if I(download_only) is specified.
    - name: Ensure NTP is running
      service:
        name: ntpd # required. Name of the service.
        state: started # not required. choices: reloaded;restarted;started;stopped. C(started)/C(stopped) are idempotent actions that will not run commands unless necessary. C(restarted) will always bounce the service. C(reloaded) will always reload. B(At least one of state and enabled are required.) Note that reloaded will start the service if it is not already started, even if your chosen init system wouldn't normally.
        sleep:  # not required. If the service is being C(restarted) then sleep this many seconds between the stop and start command. This helps to work around badly-behaving init scripts that exit immediately after signaling a process to stop. Not all service managers support sleep, i.e when using systemd this setting will be ignored.
        pattern:  # not required. If the service does not respond to the status command, name a substring to look for as would be found in the output of the I(ps) command as a stand-in for a status result. If the string is found, the service will be assumed to be started.
        enabled: yes # not required. Whether the service should start on boot. B(At least one of state and enabled are required.)
        runlevel: default # not required. For OpenRC init scripts (e.g. Gentoo) only. The runlevel that this service belongs to.
        arguments:  # not required. Additional arguments provided on the command line.
        use: auto # not required. The service module actually uses system specific modules, normally through auto detection, this setting can force a specific module. Normally it uses the value of the 'ansible_service_mgr' fact and falls back to the old 'service' module when none matching is found.